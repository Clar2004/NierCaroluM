class RedBall:
    def __init__(self, x, y, angle, speed):
        self.x = x
        self.y = y
        self.angle = angle  # Direction of the shot based on the boss's rotation
        self.speed = speed

    def move(self):
        """Move the red ball based on its angle and speed."""
        self.x += self.speed * math.cos(math.radians(self.angle))
        self.y += self.speed * math.sin(math.radians(self.angle))

    def is_offscreen(self, width, height):
        """Check if the red ball is offscreen."""
        return self.x < 0 or self.x > width or self.y < 0 or self.y > height

def get_ball_position(boss_x, boss_y, angle, distance=50):
    """Calculate the spawn position of the red ball based on the boss's position and angle."""
    angle_rad = math.radians(angle)
    spawn_x = boss_x + distance * math.cos(angle_rad)
    spawn_y = boss_y + distance * math.sin(angle_rad)
    return spawn_x, spawn_y

def shoot_red_ball(boss_x, boss_y, boss_rotation_angle):
    """Launch multiple red balls from the boss based on its position and angle."""
    global last_ball_shot_time
    
    current_time = time.time()
    if current_time - last_ball_shot_time >= BALL_SHOT_COOLDOWN:  # Check if enough time has passed since the last shot
        # Calculate spawn positions based on the boss's position and rotation angle
        spawn_positions = [
            (boss_x + boss_width // 2, boss_y),  # Top of the boss (centered at the top)
            (boss_x, boss_y + boss_height // 2),  # Left side of the boss (centered on the left edge)
            (boss_x + boss_width, boss_y + boss_height // 2),  # Right side of the boss (centered on the right edge)
        ]
        
        for spawn_x, spawn_y in spawn_positions:
            # Create a new red ball from the spawn position with direction based on boss's rotation
            new_ball = RedBall(spawn_x, spawn_y, boss_rotation_angle, ball_speed)
            red_balls.append(new_ball)
        
        # Update the last shot time
        last_ball_shot_time = current_time

def move_red_balls():
    """Move all red balls in their respective directions."""
    global red_balls
    for ball in red_balls[:]:
        ball.move()
        if ball.is_offscreen(video_width, video_height):
            red_balls.remove(ball)

def draw_red_balls(frame):
    """Draw all the red balls on the frame."""
    for ball in red_balls:
        x_start = int(ball.x)
        y_start = int(ball.y)
        
        # Calculate the bottom-right corner of the red ball image on the frame
        x_end = x_start + red_ball_image.shape[1]
        y_end = y_start + red_ball_image.shape[0]
        
        # Ensure we donâ€™t go out of bounds when drawing
        if x_end > frame.shape[1]:
            x_end = frame.shape[1]
        if y_end > frame.shape[0]:
            y_end = frame.shape[0]
        
        # Ensure the region to copy is valid
        if x_start < frame.shape[1] and y_start < frame.shape[0]:
            # Calculate the width and height of the region to blend
            ball_width = x_end - x_start
            ball_height = y_end - y_start
            
            # Adjust the size of red_ball_image to match the frame region (if necessary)
            if ball_width != red_ball_image.shape[1] or ball_height != red_ball_image.shape[0]:
                # Resize the red ball image to fit within the designated frame slice
                red_ball_resized = cv2.resize(red_ball_image, (ball_width, ball_height))
            else:
                red_ball_resized = red_ball_image  # No resizing needed
            
            # Apply alpha blending for transparent background (RGBA image handling)
            alpha_channel = red_ball_resized[:, :, 3] / 255.0  # Normalize alpha to [0, 1]
            red_ball_rgb = red_ball_resized[:, :, :3]  # RGB channels
            
            for c in range(3):  # Iterate over the RGB channels
                frame[y_start:y_end, x_start:x_end, c] = \
                    (1 - alpha_channel) * frame[y_start:y_end, x_start:x_end, c] + \
                    alpha_channel * red_ball_rgb[:, :, c]